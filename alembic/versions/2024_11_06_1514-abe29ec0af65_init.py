"""init

Revision ID: abe29ec0af65
Revises: 
Create Date: 2024-11-06 15:14:51.534128

"""

from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "abe29ec0af65"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tag",
        sa.Column("name", sa.String(length=20), nullable=False),
        sa.Column("description", sa.String(length=200), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "user",
        sa.Column("username", sa.String(length=30), nullable=False),
        sa.Column("info", sa.String(length=200), nullable=True),
        sa.Column("password", sa.LargeBinary(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column(
            "role", sa.Enum("ADMIN", "MODERATOR", "USER", name="role"), nullable=False
        ),
        sa.Column("is_banned", sa.Boolean(), nullable=False),
        sa.Column("reputation", sa.Integer(), nullable=False),
        sa.Column("image_url", sa.String(length=200), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_table(
        "downvote",
        sa.Column("source_id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "source_id", name="uq_user_source_downvote"),
    )
    op.create_table(
        "question",
        sa.Column("content", sa.String(length=1000), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "upvote",
        sa.Column("source_id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "source_id", name="uq_user_source_upvote"),
    )
    op.create_table(
        "answer",
        sa.Column("content", sa.String(length=1000), nullable=False),
        sa.Column("question_id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(["question_id"], ["question.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "question_tag",
        sa.Column("question_id", sa.Uuid(), nullable=False),
        sa.Column("tag_id", sa.Uuid(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(["question_id"], ["question.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["tag_id"], ["tag.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )

    op.execute(
        """
        CREATE OR REPLACE FUNCTION delete_related_upvotes()
        RETURNS TRIGGER AS $$
        BEGIN
            DELETE FROM upvote WHERE source_id = OLD.id;
            RETURN OLD;
        END;
        $$ LANGUAGE plpgsql;
    """
    )

    op.execute(
        """
        CREATE TRIGGER delete_upvotes_on_question_delete
        AFTER DELETE ON question
        FOR EACH ROW
        EXECUTE FUNCTION delete_related_upvotes();
    """
    )

    op.execute(
        """
        CREATE TRIGGER delete_upvotes_on_answer_delete
        AFTER DELETE ON answer
        FOR EACH ROW
        EXECUTE FUNCTION delete_related_upvotes();
    """
    )

    op.execute(
        """
        CREATE OR REPLACE FUNCTION delete_related_downvotes()
        RETURNS TRIGGER AS $$
        BEGIN
            DELETE FROM downvote WHERE source_id = OLD.id;
            RETURN OLD;
        END;
        $$ LANGUAGE plpgsql;
    """
    )

    op.execute(
        """
        CREATE TRIGGER delete_downvotes_on_question_delete
        AFTER DELETE ON question
        FOR EACH ROW
        EXECUTE FUNCTION delete_related_downvotes();
    """
    )

    op.execute(
        """
        CREATE TRIGGER delete_downvotes_on_answer_delete
        AFTER DELETE ON answer
        FOR EACH ROW
        EXECUTE FUNCTION delete_related_downvotes();
    """
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    op.execute("DROP TRIGGER IF EXISTS delete_upvotes_on_question_delete ON question;")
    op.execute("DROP TRIGGER IF EXISTS delete_upvotes_on_answer_delete ON answer;")
    op.execute("DROP FUNCTION IF EXISTS delete_related_upvotes;")

    op.execute(
        "DROP TRIGGER IF EXISTS delete_downvotes_on_question_delete ON question;"
    )
    op.execute("DROP TRIGGER IF EXISTS delete_downvotes_on_answer_delete ON answer;")
    op.execute("DROP FUNCTION IF EXISTS delete_related_downvotes;")
    op.drop_table("question_tag")
    op.drop_table("answer")
    op.drop_table("upvote")
    op.drop_table("question")
    op.drop_table("downvote")
    op.drop_table("user")
    op.drop_table("tag")

    op.execute("DROP TYPE role")
    # ### end Alembic commands ###
